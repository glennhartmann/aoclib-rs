var searchIndex = new Map(JSON.parse('[["anyhow",{"t":"FKPFHPIQNNNQNNNNNNNNMNNNNNNNNQNNENNNNNNNNNNNNNNNNNNNNNNNNM","n":["Chain","Context","Err","Error","Ok","","Result","anyhow","as_ref","","backtrace","bail","borrow","","borrow_mut","","chain","clone","clone_into","clone_to_uninit","context","","default","deref","deref_mut","downcast","downcast_mut","downcast_ref","drop","ensure","fmt","","format_err","from","","","","into","","into_iter","is","len","msg","new","","next","next_back","root_cause","size_hint","to_owned","to_string","try_from","","try_into","","type_id","","with_context"],"q":[[0,"anyhow"],[58,"core::error"],[59,"std::backtrace"],[60,"core::fmt"],[61,"core::marker"],[62,"core::result"],[63,"core::option"],[64,"alloc::string"],[65,"core::any"],[66,"core::ops::function"]],"i":"``b``0``d00`0n101000Ab21222222`22`2221211212211121122121210","f":"````{c{{b{c}}}{}}```{{{f{d}}}{{f{h}}}}0{{{f{d}}}{{f{j}}}}`{f{{f{c}}}{}}0{{{f{l}}}{{f{lc}}}{}}0{{{f{d}}}n}{{{f{n}}}n}{{f{f{lc}}}A`{}}{fA`}{{Abc}{{b{ed}}}{AdAfAh}{}}{{dc}d{AdAfAh}}{{}n}{{{f{d}}}{{f{c}}}{}}{{{f{ld}}}{{f{lc}}}{}}{d{{Aj{cd}}}{AdAlAfAh}}{{{f{ld}}}{{An{{f{lc}}}}}{AdAlAfAh}}{{{f{d}}}{{An{{f{c}}}}}{AdAlAfAh}}{{{f{ld}}}A`}`{{{f{d}}{f{lB`}}}Bb}0`{cd{hAfAh}}{Bdc{}}{cc{}}0{{}c{}}00{{{f{d}}}Bf}{{{f{n}}}Bh}{cd{AdAlAfAh}}6{{{f{h}}}n}{{{f{ln}}}{{An{c}}}{}}0{{{f{d}}}{{f{h}}}}{{{f{n}}}{{Bj{Bh{An{Bh}}}}}}{fc{}}{fBl}{c{{Aj{e}}}{}{}}0{{}{{Aj{c}}}{}}0{fBn}0{{Abe}{{b{gd}}}{AdAfAh}{{Cb{}{{C`{c}}}}}{}}","D":"Cf","p":[[8,"Result",0],[5,"Error",0],[1,"reference"],[10,"Error",58],[5,"Backtrace",59],[0,"mut"],[5,"Chain",0],[1,"unit"],[10,"Context",0],[10,"Display",60],[10,"Send",61],[10,"Sync",61],[6,"Result",62],[10,"Debug",60],[6,"Option",63],[5,"Formatter",60],[8,"Result",60],[1,"never"],[1,"bool"],[1,"usize"],[1,"tuple"],[5,"String",64],[5,"TypeId",65],[17,"Output"],[10,"FnOnce",66]],"r":[],"b":[[8,"impl-AsRef%3Cdyn+Error%3E-for-Error"],[9,"impl-AsRef%3Cdyn+Error+%2B+Send+%2B+Sync%3E-for-Error"],[30,"impl-Debug-for-Error"],[31,"impl-Display-for-Error"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAB8ACgAJAAEADQADABIAAgAXAAIAHQAAAB8ABAAoAAAAKgAAAC0AAgAxAAgA"}],["aoclib_rs",{"t":"CCHHHHQHHCHHRKRRRRRFKNNNNNNNMMNNNMNNMMNMNMNNNNGPPPPNNNNNNNNNNNNNNNNNNNNNFNNNNNNNNNNNNN","n":["dijkstra","dir","fwd_rev_incl_range","pad","pairwise_iter","prep_io","printwriteln","split_and_parse","split_by_char","trie","u8_to_string","usize_plus_i32","Bounds","Dijkstrable","Dist","","PQE","Point","","PqElement","PriorityQueueElement","borrow","borrow_mut","clone","clone_into","clone_to_uninit","cmp","dijkstra","dist","","","eq","from","init","","into","is_impossible","neighbours","partial_cmp","point","","set_dist","to_owned","try_from","try_into","type_id","Direction","Down","Left","Right","Up","apply_delta_to_usizes","borrow","borrow_mut","clone","clone_into","clone_to_uninit","delta","eq","fmt","from","hash","into","iter","iter_valid_usizes_deltas","opposite","rotate_left","rotate_right","to_owned","try_from","try_into","type_id","Trie","borrow","borrow_mut","default","find","from","insert","into","is_terminal","new","prefix","try_from","try_into","type_id"],"q":[[0,"aoclib_rs"],[12,"aoclib_rs::dijkstra"],[46,"aoclib_rs::dir"],[72,"aoclib_rs::trie"],[86,"core::iter::traits::iterator"],[87,"alloc::vec"],[88,"core::clone"],[89,"core::marker"],[90,"alloc::string"],[91,"std::fs"],[92,"std::io::buffered::bufwriter"],[93,"anyhow"],[94,"core::str::traits"],[95,"core::ops::arith"],[96,"core::cmp"],[97,"core::option"],[98,"core::result"],[99,"core::any"],[100,"core::fmt"],[101,"core::hash"]],"i":"````````````Cj`0Cn110``Bf000002210001002201020000`Dh000000000000000000000000`E`000000000000","f":"``{{bb}{{`{{f{}{{d{b}}}}}}}}{{{j{{l{{j{{h{c}}}}}}}}bc}{{l{{l{c}}}}}{nA`}}{{{j{{h{c}}}}}{{`{{f{}{{d{{Ab{cc}}}}}}}}}A`}{{{j{AdAf}}Ah}{{B`{{Ab{{Al{Aj}}{l{{j{An}}}}}}}}}}`{{{j{An}}{j{An}}}{{B`{{l{c}}}}}Bb}{{{j{An}}}{{l{{j{An}}}}}}`{AhAf}{{bBd}b}`````````{j{{j{c}}}{}}{{{j{Ad}}}{{j{Adc}}}{}}{{{j{{Bf{ce}}}}}{{Bf{ce}}}{A`n}{A`{Bj{}{{Bh{}}}}Bln}}{{j{j{Adc}}}Bn{}}{jBn}{{{j{{Bf{ce}}}}{j{{Bf{ce}}}}}C`A`{A`{Bj{}{{Bh{}}}}Bl}}{{{j{Ad{Cj{}{{Cb{c}}{Cd{e}}{Cf{g}}{Ch{i}}}}}}cge}BnA`{ClA`}{A`{Bj{}{{Bh{g}}}}}{{Cn{}{{Cb{c}}{Cf{g}}}}}}{{{j{{Cj{}{{Cb{c}}{Cd{e}}{Cf{g}}{Ch{i}}}}}}c}{{D`{g}}}A`{ClA`}{A`{Bj{}{{Bh{g}}}}}{{Cn{}{{Cb{c}}{Cf{g}}}}}}{{{j{{Cn{}{{Cb{c}}{Cf{e}}}}}}}e{}{{Bj{}{{Bh{e}}}}}}{{{j{{Bf{ce}}}}}gA`{A`{Bj{}{{Bh{}}}}Bl}{}}{{{j{{Bf{ce}}}}{j{{Bf{ce}}}}}DbA`{A`{Bj{}{{Bh{}}}}Bl}}{cc{}}{{ce}{{Cn{}{{Cb{c}}{Cf{e}}}}}{}{{Bj{}{{Bh{e}}}}}}{{ce}{{Bf{gi}}}{}{}A`{A`{Bj{}{{Bh{}}}}Bl}}{{}c{}}{{{j{{Cj{}{{Cb{c}}{Cd{e}}{Cf{g}}{Ch{i}}}}}}c}DbA`{ClA`}{A`{Bj{}{{Bh{g}}}}}{{Cn{}{{Cb{c}}{Cf{g}}}}}}{{ce}{{`{{f{}{{d{{Ab{cg}}}}}}}}}{}{}{}}{{{j{{Bf{ce}}}}{j{{Bf{ce}}}}}{{D`{C`}}}A`{A`{Bj{}{{Bh{}}}}Bl}}{{{j{{Cn{}{{Cb{c}}{Cf{e}}}}}}}c{}{{Bj{}{{Bh{e}}}}}}9{{{j{Ad{Cj{}{{Cb{c}}{Cd{e}}{Cf{g}}{Ch{i}}}}}}c{D`{g}}}BnA`{ClA`}{A`{Bj{}{{Bh{g}}}}}{{Cn{}{{Cb{c}}{Cf{g}}}}}}{jc{}}{c{{Dd{e}}}{}{}}{{}{{Dd{c}}}{}}{jDf}`````{{Dh{Ab{bb}}}{{Ab{bb}}}}{j{{j{c}}}{}}{{{j{Ad}}}{{j{Adc}}}{}}{{{j{Dh}}}Dh}{{j{j{Adc}}}Bn{}}{jBn}{Dh{{Ab{BdBd}}}}{{{j{Dh}}{j{Dh}}}Db}{{{j{Dh}}{j{AdDj}}}Dl}{cc{}}{{{j{Dh}}{j{Adc}}}BnDn}{{}c{}}{{}{{`{{f{}{{d{Dh}}}}}}}}{{{Ab{bb}}{Ab{bb}}}{{`{{f{}{{d{{Ab{bb}}}}}}}}}}{DhDh}00{jc{}}{c{{Dd{e}}}{}{}}{{}{{Dd{c}}}{}}{jDf}`{j{{j{c}}}{}}{{{j{Ad}}}{{j{Adc}}}{}}{{}E`}{{{j{E`}}{j{An}}}{{D`{{j{E`}}}}}}={{{j{AdE`}}{j{An}}}Bn}<{{{j{E`}}}Db}3{{{j{E`}}}{{j{An}}}}987","D":"l","p":[[1,"usize"],[17,"Item"],[10,"Iterator",86],[1,"slice"],[1,"reference"],[5,"Vec",87],[10,"Clone",88],[10,"Copy",89],[1,"tuple"],[0,"mut"],[5,"String",90],[1,"u8"],[5,"File",91],[5,"BufWriter",92],[1,"str"],[8,"Result",93],[10,"FromStr",94],[1,"i32"],[5,"PqElement",12],[17,"Output"],[10,"Add",95],[10,"Ord",96],[1,"unit"],[6,"Ordering",96],[17,"Point"],[17,"Bounds"],[17,"Dist"],[17,"PQE"],[10,"Dijkstrable",12],[10,"Sized",89],[10,"PriorityQueueElement",12],[6,"Option",97],[1,"bool"],[6,"Result",98],[5,"TypeId",99],[6,"Direction",46],[5,"Formatter",100],[8,"Result",100],[10,"Hasher",101],[5,"Trie",72]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAFAABwAAACAAIgABACUAFwA+AAAAQAANAE8AAABRAAUA"}]]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
//{"start":39,"fragment_lengths":[2086,3976]}